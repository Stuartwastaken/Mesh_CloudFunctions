import * as admin from "firebase-admin";
import * as functions from "firebase-functions";

/**
 * Generates a short, unique ID string consisting of alphanumeric characters.
 *
 * The ID is composed of uppercase and lowercase letters and digits, with a
 * length of 8 characters. The function randomly selects characters from a
 * predefined set to create the unique ID.
 *
 * @return {string} A unique ID string of 8 characters.
 */
function generateUniqueId(): string {
  // Characters to use in the ID
  const chars = `ABCDEFGHIJKLMNOPQRSTUVWXYZ
  abcdefghijklmnopqrstuvwxyz0123456789`;
  const idLength = 8; // Length of the unique ID

  // Generate a random ID
  let uniqueId = "";
  for (let i = 0; i < idLength; i++) {
    const randomIndex = Math.floor(Math.random() * chars.length);
    uniqueId += chars[randomIndex];
  }

  return uniqueId.replace(" ", "");
}

export const generateTestData = functions.firestore
    .document("create_testdata_tempbin/{docId}")
    .onCreate(async (snapshot, context) => {
      console.log("Starting function");
      const names: string[] = [
        "Alondra",
        "Lance",
        "Ellie",
        "Aman",
        "Allie",
        "Victoria",
        "Jamie",
        "Christina",
        "Alex",
        "Amy",
        "Adrienne",
        "Holly",
        "Clara",
        "Saska",
        "Caroline",
        "Jon",
        "Courtney",
        "Erin",
        "Brit",
        "Max",
        "Katie",
        "Heather",
        "Noah",
        "Amanda",
        "Amy",
        "Aaron",
        "Kristina",
        "Sarita",
        "Richard",
        "Mario",
        "Allen",
        "Ryan",
        "Adam",
        "Joe",
        "Amy",
        "Jennifer",
        "Jeannine",
        "Raele",
        "Beto",
        "Angel",
        "Ranee",
        "Rhonda",
        "Lyric",
        "Lyric",
        "Timothy",
        "Paris",
        "Natalie",
        "Ahmed",
        "Damian",
        "Kendra",
        "Mawuli",
        "Heather",
        "Robert",
        "Trish",
        "James",
        "Jory",
        "Robyn",
        "Becky",
        "Tae",
        "Kevin",
        "Michael",
        "Kathryn",
        "DaMontae",
        "Matthew",
        "Mark",
        "John",
        "Emily",
        "Jim",
        "Leah",
        "Ashley",
        "Mary",
        "Pat",
        "Sue",
        "Rick",
        "Cindy",
        "Julie",
        "Nuria",
        "Kate",
        "Tom",
        "Ebrima",
        "Guruprasad",
        "Francis",
        "Sid",
        "Julia",
        "Lance",
        "Margaret",
        "Talyn",
        "Corey",
        "Emma",
        "Clare",
        "Skye",
        "Aaron",
        "Garret",
        "Claire",
        "Maria",
        "Samantha",
        "Ishita",
        "Brett",
        "Annie",
        "Parth",
        "David",
        "Hana",
        "Makenzie",
        "Ella",
        "Max",
        "Xavi",
        "Mya",
        "Moses",
        "Christina",
        "Matthew",
        "Anu",
        "Benny",
        "Eli",
        "Taylor",
        "Emmanuel",
        "Rahul",
        "Madison",
        "Adam",
        "Carlie",
        "Amelia",
        "Matthew",
        "Payton",
        "Zachary",
        "Thanh",
        "Macy",
        "Michael",
        "Laura",
        "Ron",
        "Jacob",
        "Natalie",
        "Ying",
        "Rachel",
        "Ben",
        "Kyle",
        "Nichole",
        "Aaron",
        "Allison",
        "Brock",
        "Anmol",
        "Poppy",
        "Austen",
        "Oliver",
        "Jeff",
        "Eli",
        "Levi",
        "Holly",
        "Maddie",
        "Jay",
        "Corey",
        "David",
        "Juliana",
        "Rafal",
        "Kayla",
        "Allie",
        "Celina",
        "Madeline",
        "Liz",
        "Morgan",
        "Sreeja",
        "Minni",
        "Ameya",
      ];

      const ages: string[] = [
        "9/29/1998",
        "4/16/1992",
        "6/11/2000",
        "4/24/2004",
        "4/27/2001",
        "12/1/2001",
        "4/8/2000",
        "10/15/1999",
        "9/23/2001",
        "5/31/2000",
        "10/24/92",
        "7/16/1994",
        "5/9/1994",
        "4/7/1994",
        "1/29/1993",
        "1/7/1995",
        "3/9/1996",
        "10/21/2003",
        "1/31/1996",
        "11/20/1996",
        "1/30/2001",
        "10/5/1984",
        "7/4/1989",
        "3/25/1982",
        "8/29/1965",
        "4/1/1990",
        "6/2/1990",
        "11/26/1986",
        "2/23/1962",
        "4/20/1990",
        "9/19/1991",
        "9/23/1986",
        "12/24/1990",
        "2/17/1964",
        "3/17/1988",
        "11/6/1984",
        "10/11/1963",
        "7/22/1991",
        "3/1/1979",
        "5/3/1979",
        "3/27/1971",
        "7/27/1977",
        "7/26/1989",
        "7/26/1989",
        "7/11/1960",
        "3/19/1976",
        "5/14/1990",
        "8/13/1989",
        "11/6/1979",
        "9/17/1982",
        "1/29/1981",
        "5/21/1970",
        "2/12/1955",
        "8/7/1960",
        "9/7/1988",
        "10/21/1961",
        "4/24/1966",
        "5/14/1978",
        "7/8/1991",
        "4/25/1991",
        "6/2/1989",
        "3/30/1990",
        "11/3/1985",
        "5/1/1986",
        "10/11/1951",
        "1/1/1980",
        "10/8/1978",
        "11/10/1979",
        "11/21/1986",
        "7/1/1985",
        "11/14/1953",
        "9/1/1983",
        "6/25/1946",
        "2/3/1970",
        "8/13/1955",
        "9/30/1962",
        "9/2/1956",
        "3/10/1958",
        "3/2/1959",
        "2/1/1996",
        "8/6/1998",
        "9/29/1993",
        "7/14/1999",
        "4/15/2000",
        "2/27/1995",
        "10/31/1996",
        "1/17/2000",
        "11/5/1998",
        "4/22/1997",
        "12/1/1997",
        "5/13/2001",
        "6/21/2000",
        "1/19/1998",
        "1/1/1995",
        "6/20/1992",
        "11/5/1997",
        "11/29/1996",
        "11/10/1994",
        "4/22/1992",
        "9/9/1994",
        "4/24/1998",
        "7/9/1995",
        "5/10/1998",
        "5/2/2005",
        "3/1/1992",
        "5/1/2000",
        "6/15/1998",
        "11/9/1997",
        "4/19/2001",
        "1/14/2004",
        "6/18/94",
        "3/8/2001",
        "4/3/2000",
        "8/5/1996",
        "10/15/1996",
        "8/1/1995",
        "9/24/1999",
        "7/24/1998",
        "7/1/1996",
        "6/5/1992",
        "8/10/1996",
        "10/6/2000",
        "8/6/2001",
        "8/26/1997",
        "6/27/1992",
        "2/21/1992",
        "2/24/2001",
        "1/23/1995",
        "9/8/1992",
        "12/16/1997",
        "10/13/1997",
        "10/29/2000",
        "3/8/2000",
        "10/27/1997",
        "2/29/1996",
        "3/22/1998",
        "7/2/1998",
        "11/21/2001",
        "4/14/1998",
        "1/12/2000",
        "6/3/1996",
        "1/23/1999",
        "9/11/1996",
        "5/3/1998",
        "9/19/1999",
        "1/20/2000",
        "4/22/1996",
        "1/30/1996",
        "1/10/1994",
        "3/24/1992",
        "1/18/2000",
        "11/30/1992",
        "7/29/1996",
        "10/14/1996",
        "12/11/1996",
        "4/1/2000",
        "7/16/1999",
        "12/4/1995",
        "12/14/1998",
        "11/27/2000",
        "2/28/1999",
      ];
      const genders: string[] = [
        "Female",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Female",
        "Female",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Prefer not to answer",
        "Prefer not to answer",
        "Male",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Female",
        "Male",
        "Male",
        "Male",
        "Female",
        "Male",
        "Male",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Female",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Male",
        "Male",
        "Female",
        "Female",
        "Female",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Female",
        "Female",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Female",
        "Female",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Male",
        "Male",
        "Female",
        "Male",
        "Male",
        "Male",
        "Male",
        "Male",
        "Female",
        "Female",
        "Male",
        "Male",
        "Male",
        "Female",
        "Male",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Female",
        "Male",
      ];


      const db = admin.firestore();
      const fixedLocation = admin.firestore()
          .doc("location/Azu8sQNogP8xTVmhQXpO_Madison_Wisconsin");

      try {
        // Generate and store user data
        for (let i = 0; i < 20; i++) {
          const uniqueUserId = generateUniqueId();
          const userData = {
            name: names[i],
            sex: genders[i].toLowerCase(),
            age: ages[i],
            uid: [`users/${uniqueUserId}`],
            location: fixedLocation,
            testing: true,
          };

          await db.collection("join_lobby_tempbin").add(userData)
              .then((docRef) => console
                  .log("Document written with ID: ", docRef.id))
              .catch((error) => console
                  .error("Error adding document: ", error));
        }

        console.log("Data processing completed.");
        await snapshot.ref.set({processed: true}, {merge: true});
      } catch (error) {
        console.error("Error processing data:", error);
        await snapshot.ref.set({error: error}, {merge: true});
      }
    });
